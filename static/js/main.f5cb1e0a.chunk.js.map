{"version":3,"sources":["mocking/mock.ts","api/api-utils.ts","api/api.ts","providers/TodolistContext.tsx","components/InputWithLabel.tsx","components/AddTodo.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["fetchMock","get","url","todoList","text","id","delay","RestStatus","getRestStatus","responseStatus","Success","Error","createTodoAndReturnUpdatedTodolist","todo","a","createTodo","todolist","restTodoList","status","data","fetchTodolist","fetchTodos","deleteTodoAndReturnUpdatedTodolist","deleteTodo","fetch","response","restStatus","error","Promise","reject","json","method","headers","body","JSON","stringify","todolistContext","createContext","restTodolist","NotLoadedYet","addTodo","TasksProvider","props","useState","Loading","setRestTodolist","useEffect","then","Provider","value","children","InputWithLabel","label","onChange","style","display","htmlFor","type","AddTodo","useContext","input","setInput","onSubmit","e","Math","random","preventDefault","event","target","TodoItem","justifyContent","onClick","TodoList","todos","isEmpty","length","map","key","App","process","REACT_APP_MOCK","console","log","require","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5cb1e0a.chunk.js","sourcesContent":["import fetchMock from \"fetch-mock\";\n\nlet delayfaktor = 1;\n\nfetchMock.get(\n  \"express:/todolist\",\n  (url) => {\n    return {\n      todoList: [{ text: \"Hello I'm MOCK\", id: \"9876543210\" }],\n    };\n  },\n  {\n    delay: 1000 * delayfaktor,\n  }\n);\n","// types and interfaces\nimport { Todolist } from \"../domain/Todo\";\n\nexport enum RestStatus {\n  NotLoadedYet = \"NotLoadedYet\",\n  Loading = \"Loading\",\n  Success = \"Success\",\n  Error = \"Error\",\n}\n\nexport interface NotLoadedYet {\n  status: RestStatus.NotLoadedYet;\n}\n\nexport interface Loading {\n  status: RestStatus.Loading;\n}\n\nexport interface Success<T> {\n  status: RestStatus.Success;\n  data: T;\n}\n\nexport interface Error {\n  status: RestStatus.Error;\n}\n\nexport type RestResource<T> = NotLoadedYet | Loading | Success<T> | Error;\n\nexport const getRestStatus = (responseStatus: number): RestStatus => {\n  switch (responseStatus) {\n    case 200: {\n      return RestStatus.Success;\n    }\n    default: {\n      return RestStatus.Error;\n    }\n  }\n};\n\nexport type RestTodolist = RestResource<Todolist>;\n","import {\n  getRestStatus,\n  RestResource,\n  RestStatus,\n  RestTodolist,\n} from \"./api-utils\";\nimport { Todo, Todolist } from \"../domain/Todo\";\n\n/*\n  CRUD todolist (available functions)\n */\nexport const createTodoAndReturnUpdatedTodolist = async (\n  todo: Todo\n): Promise<RestTodolist> => {\n  try {\n    const todolist = await createTodo(todo);\n\n    const restTodoList = {\n      status: RestStatus.Success,\n      data: todolist,\n    };\n    return restTodoList;\n  } catch (error) {\n    return { status: RestStatus.Error };\n  }\n};\n\nexport const fetchTodolist = async (): Promise<RestTodolist> => {\n  try {\n    const todolist = await fetchTodos();\n\n    const restTodoList = {\n      status: RestStatus.Success,\n      data: todolist,\n    };\n    return restTodoList;\n  } catch (error) {\n    return { status: RestStatus.Error };\n  }\n};\n\nexport const deleteTodoAndReturnUpdatedTodolist = async (\n  id: number\n): Promise<RestTodolist> => {\n  try {\n    const todolist = await deleteTodo(id);\n\n    const restTodoList = {\n      status: RestStatus.Success,\n      data: todolist,\n    };\n    return restTodoList;\n  } catch (error) {\n    return { status: RestStatus.Error };\n  }\n};\n\nconst fetchTodos = async (): Promise<Todolist> => {\n  const response = await fetch(\"/todolist\");\n  const restStatus: RestStatus = getRestStatus(response.status);\n\n  if (restStatus !== RestStatus.Success) {\n    const error = {\n      status: restStatus,\n    };\n\n    return Promise.reject(error);\n  }\n\n  return await response.json();\n};\n\nconst createTodo = async (todo: Todo): Promise<Todolist> => {\n  const response = await fetch(\"/create/todo\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ todo: todo }),\n  });\n\n  const restStatus: RestStatus = getRestStatus(response.status);\n\n  if (restStatus !== RestStatus.Success) {\n    const error = {\n      status: restStatus,\n    };\n\n    return Promise.reject(error);\n  }\n\n  return await response.json();\n};\n\nconst deleteTodo = async (id: number): Promise<Todolist> => {\n  const response = await fetch(\"/delete/todo\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ id: id }),\n  });\n\n  const restStatus: RestStatus = getRestStatus(response.status);\n\n  if (restStatus !== RestStatus.Success) {\n    const error = {\n      status: restStatus,\n    };\n\n    return Promise.reject(error);\n  }\n\n  return await response.json();\n};\n\n/*\n   Statistics\n */\n\nexport interface Statistic {\n  value: number;\n}\n\nexport type RestStatistic = RestResource<Statistic>;\n\nexport const fetchNbOfCreatedTasks = async (): Promise<RestStatistic> => {\n  const response = await fetch(\"/stats/created\", {\n    method: \"GET\",\n  });\n\n  const restStatus = getRestStatus(response.status);\n  if (restStatus === RestStatus.Success) {\n    return {\n      status: RestStatus.Success,\n      data: await response.json().then((data) => {\n        return data;\n      }),\n    };\n  }\n  return {\n    status: restStatus,\n  };\n};\n\nexport const fetchNbOfDeletedTasks = async (): Promise<RestStatistic> => {\n  const response = await fetch(\"/stats/deleted\", {\n    method: \"GET\",\n  });\n\n  const restStatus = getRestStatus(response.status);\n  if (restStatus === RestStatus.Success) {\n    return {\n      status: RestStatus.Success,\n      data: await response.json().then((data) => {\n        return data;\n      }),\n    };\n  }\n  return {\n    status: restStatus,\n  };\n};\n","import React, {\n  createContext,\n  FunctionComponent,\n  useEffect,\n  useState,\n} from \"react\";\nimport { RestStatus, RestTodolist } from \"../api/api-utils\";\nimport {\n  createTodoAndReturnUpdatedTodolist,\n  deleteTodoAndReturnUpdatedTodolist,\n  fetchTodolist,\n} from \"../api/api\";\nimport { Todo } from \"../domain/Todo\";\n\nexport type TodolistContextType = {\n  restTodolist: RestTodolist;\n  addTodo: (value: Todo) => void;\n  deleteTodo: (value: number) => void;\n};\n\nexport const todolistContext = createContext<TodolistContextType>({\n  restTodolist: { status: RestStatus.NotLoadedYet },\n  addTodo: () => {},\n  deleteTodo: () => {},\n});\n\nexport const TasksProvider: FunctionComponent = (props) => {\n  const [restTodolist, setRestTodolist] = useState<RestTodolist>({\n    status: RestStatus.Loading,\n  });\n\n  const addTodo = (todo: Todo): void => {\n    createTodoAndReturnUpdatedTodolist(todo).then((todolist) => {\n      setRestTodolist(todolist);\n    });\n  };\n\n  const deleteTodo = (id: number) => {\n    deleteTodoAndReturnUpdatedTodolist(id).then((todolist) => {\n      setRestTodolist(todolist);\n    });\n  };\n\n  useEffect(() => {\n    fetchTodolist().then((todolist) => {\n      setRestTodolist(todolist);\n    });\n  }, []);\n\n  const Provider = todolistContext.Provider;\n  return (\n    <Provider value={{ restTodolist, addTodo, deleteTodo }}>\n      {props.children}\n    </Provider>\n  );\n};\n","import React from \"react\";\n\ntype InputWithLabelProps = React.InputHTMLAttributes<HTMLInputElement> & {\n  label: string;\n};\n\nfunction InputWithLabel({ label, value, onChange }: InputWithLabelProps) {\n  return (\n    <>\n      <label style={{ display: \"block\" }} htmlFor=\"input-with-label\">\n        {label}\n      </label>\n      <input\n        type=\"text\"\n        id=\"input-with-label\"\n        value={value}\n        onChange={onChange}\n      />\n    </>\n  );\n}\n\nexport default InputWithLabel;\n","import React, { useContext, useState } from \"react\";\nimport InputWithLabel from \"./InputWithLabel\";\nimport {\n  todolistContext,\n  TodolistContextType,\n} from \"../providers/TodolistContext\";\n\nexport function AddTodo() {\n  const { addTodo } = useContext<TodolistContextType>(todolistContext);\n  const [input, setInput] = useState(\"\");\n\n  function handleSubmit(e: React.FormEvent) {\n    addTodo({ text: input, id: Math.random() });\n    setInput(\"\");\n    e.preventDefault();\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Add item:</h2>\n      <InputWithLabel\n        label=\"New item:\"\n        value={input}\n        onChange={(event) => setInput(event.target.value)}\n      />\n      <button>Add</button>\n    </form>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { Todo } from \"../domain/Todo\";\nimport {\n  todolistContext,\n  TodolistContextType,\n} from \"../providers/TodolistContext\";\n\nexport type TodoItemProps = {\n  todo: Todo;\n};\n\nexport function TodoItem({ todo }: TodoItemProps) {\n  const { deleteTodo } = useContext<TodolistContextType>(todolistContext);\n\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n      <label htmlFor={`${todo.id}`}>{todo.text}</label>\n      <button\n        id={`${todo.id}`}\n        onClick={() => {\n          deleteTodo(todo.id);\n        }}\n      >\n        x\n      </button>\n    </div>\n  );\n}\n","import React, { FunctionComponent, useContext } from \"react\";\nimport { TodoItem } from \"./TodoItem\";\nimport { RestStatus } from \"../api/api-utils\";\nimport {\n  todolistContext,\n  TodolistContextType,\n} from \"../providers/TodolistContext\";\n\nexport const TodoList: FunctionComponent = () => {\n  const { restTodolist } = useContext<TodolistContextType>(todolistContext);\n\n  const todos =\n    restTodolist.status === RestStatus.Success\n      ? restTodolist.data.todoList\n      : [];\n  const isEmpty = todos.length === 0;\n\n  return (\n    <>\n      <h2>List:</h2>\n      {isEmpty ? (\n        <p>You've finished all your tasks!</p>\n      ) : (\n        <ul>\n          {todos.map((todo) => (\n            <TodoItem todo={todo} key={todo.id} />\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { TasksProvider } from \"./providers/TodolistContext\";\nimport { AddTodo } from \"./components/AddTodo\";\nimport { TodoList } from \"./components/TodoList\";\n\nconst App: FunctionComponent = () => {\n  return (\n    <>\n      <TasksProvider>\n        <h1>Simple to-do list</h1>\n        Add things that you need to do here, and then remove them when you've\n        solved them!\n        <TodoList />\n        <AddTodo />\n      </TasksProvider>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nif (process.env.REACT_APP_MOCK) {\n  console.log(\"========================================\");\n  console.log(\"=============== With MOCK! =============\");\n  console.log(\"===== Do not enable in PRODUCTION ======\");\n  console.log(\"========================================\");\n  require(\"./mocking/mock\");\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}